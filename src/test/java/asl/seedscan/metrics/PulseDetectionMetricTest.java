package asl.seedscan.metrics;

import static asl.seedscan.metrics.PulseDetectionMetric.getCenteredMovingAveragePercentiles;
import static asl.seedscan.metrics.PulseDetectionMetric.getStepFunction;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import org.junit.Test;

public class PulseDetectionMetricTest {

  @Test
  public void testCrossCorrelation() {
    double[] x = new double[175];
    for (int i = 0; i < x.length; ++i) {
      x[i] = Math.pow(i, 2);
    }
    double[] y = new double[50];
    for (int i = 0; i < y.length; ++i) {
      y[i] = Math.pow(200 + i, 2);
    }

    double[] corr = PulseDetectionMetric.crossCorrelate(x, y)[0];
    double[] expect = {
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627,
        0.97751627, 0.97751627, 0.97751627, 0.97751627, 0.97751627
    };
    assertArrayEquals(expect, corr, 1E-5);
  }

  @Test
  public void testCrossCorrelationScale() {
    double[] x = new double[175];
    for (int i = 0; i < x.length; ++i) {
      x[i] = Math.pow(i, 2);
    }
    double[] y = new double[50];
    for (int i = 0; i < y.length; ++i) {
      y[i] = Math.pow(200 + i, 2);
    }

    double[] scale = PulseDetectionMetric.crossCorrelate(x, y)[1];
    double[] expect = new double[x.length - y.length];
    Arrays.fill(expect, 1.);
    assertArrayEquals(expect, scale, 1E-5);
  }

  @Test
  public void testMovingAverageResult() {
    double[] x = new double[25000];
    for (int i = 0; i < x.length; ++i) {
      x[i] = Math.pow(i, 2);
    }
    double[][] result = getCenteredMovingAveragePercentiles(x, 240);
    int[] lowestComparison = new int[]{
        487, 513, 513, 513, 540, 540, 540, 567, 567, 567, 595, 595, 595, 623, 623, 623, 652, 652,
        652, 682, 682, 682, 713, 713, 713, 744, 744, 744, 776, 776, 776, 808, 808, 808, 841, 841,
        841, 875, 875, 875, 910, 910, 910, 945, 945, 945, 981, 981, 981, 1017, 1017, 1017, 1054,
        1054, 1054, 1092, 1092, 1092, 1131, 1131, 1131, 1170, 1170, 1170, 1210, 1210, 1210, 1250,
        1250, 1250, 1291, 1291, 1291, 1333, 1333, 1333, 1376, 1376, 1376, 1419, 1419, 1419, 1463,
        1463, 1463, 1507, 1507, 1507, 1552, 1552, 1552, 1598, 1598, 1598, 1645, 1645, 1645, 1692,
        1692, 1692, 1740, 1740, 1740, 1788, 1788, 1788, 1837, 1837, 1837, 1887, 1887, 1887, 1938,
        1938, 1938, 1989, 1989, 1989, 2041, 2041, 2120, 2201, 2284, 2369, 2456, 2545, 2636, 2729,
        2824, 2921, 3020, 3121, 3224, 3329, 3436, 3545, 3656, 3769, 3884, 4001, 4120, 4241, 4364,
        4489, 4616, 4745, 4876, 5009, 5144, 5281, 5420, 5561, 5704, 5849, 5996, 6145, 6296, 6449,
        6604, 6761, 6920, 7081, 7244, 7409, 7576, 7745, 7916, 8089, 8264, 8441, 8620, 8801, 8984,
        9169, 9356, 9545, 9736, 9929, 10124, 10321, 10520, 10721, 10924, 11129, 11336, 11545, 11756,
        11969, 12184, 12401, 12620, 12841, 13064, 13289, 13516, 13745, 13976, 14209, 14444, 14681,
        14920, 15161, 15404, 15649, 15896, 16145, 16396, 16649, 16904, 17161, 17420, 17681, 17944
    };
    for (int i = 0; i < lowestComparison.length; ++i) {
      assertEquals(lowestComparison[i], (int) result[0][i]);
    }
  }

  @Test
  public void validateStepFunction() {
    double[] step = getStepFunction(0.1);
    double[] expect = new double[]{
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.5, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
    };
    assertArrayEquals(expect, step, 1E-10);
  }

}
